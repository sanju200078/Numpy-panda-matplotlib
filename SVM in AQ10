SVM (Support Vector Machines) with automatic encoding and safe column handling
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import classification_report, confusion_matrix, f1_score, jaccard_score
import itertools

# ================================
# 1. Load and clean dataset
# ================================
df = pd.read_csv('/content/clean_data1.csv')

# Drop unwanted columns if they exist
drop_cols = ['ethnicity', 'contry_of_res', 'relation']
df.drop(columns=[c for c in drop_cols if c in df.columns], inplace=True)

# Create dummy variables for 'gender' if exists
if 'gender' in df.columns:
    df = pd.get_dummies(df, columns=['gender'], prefix='gender')

# Encode all remaining categorical columns
le = LabelEncoder()
for col in df.columns:
    if df[col].dtype == 'object':
        df[col] = le.fit_transform(df[col])

# Ensure numeric type
df = df.astype(int)

# Show final column names
print("Columns after processing:", df.columns.tolist())

# ================================
# 2. Prepare features & labels
# ================================
# Pick features that exist in dataframe
feature_cols = [
    'A1_Score','A2_Score','A3_Score','A4_Score','A5_Score',
    'A6_Score','A7_Score','A8_Score','A9_Score','A10_Score',
    'autism','jundice','gender_f','gender_m','age','used_app_before'
]
# Keep only the ones that actually exist
feature_cols = [c for c in feature_cols if c in df.columns]

X = np.asanyarray(df[feature_cols])
y = np.asanyarray(df[['Class/ASD']])

# ================================
# 3. Train-test split
# ================================
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=4
)
print('Train set:', X_train.shape, y_train.shape)
print('Test set:', X_test.shape, y_test.shape)

# ================================
# 4. Train SVM model
# ================================
clf = svm.SVC(kernel='rbf')
clf.fit(X_train, y_train.ravel())

# Predictions
yhat = clf.predict(X_test)

# ================================
# 5. Confusion matrix function
# ================================
def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

# ================================
# 6. Evaluation
# ================================
cnf_matrix = confusion_matrix(y_test, yhat, labels=[0,1])
print(classification_report(y_test, yhat))

plt.figure()
plot_confusion_matrix(cnf_matrix, classes=['Class/ASD(0)','Class/ASD(1)'], normalize=False)

print("F1 Score (weighted):", f1_score(y_test, yhat, average='weighted'))
print("Jaccard Score (pos_label=0):", jaccard_score(y_test, yhat, pos_label=0))

plt.show()
