# Decision Tree with automatic categorical encoding

# Suppress warnings
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn

import sys
import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
import sklearn.tree as tree
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn import metrics
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder

# ===============================
# 1. Load and clean dataset
# ===============================
df = pd.read_csv('/content/clean_data.csv')

# Drop unwanted columns if they exist
drop_cols = ['ethnicity', 'contry_of_res', 'relation']
df.drop(columns=[c for c in drop_cols if c in df.columns], inplace=True)

# Encode all categorical columns
le = LabelEncoder()
for col in df.columns:
    if df[col].dtype == 'object':
        df[col] = le.fit_transform(df[col])

# Ensure numeric type
df = df.astype(int)

# Check class distribution
print(df['Class/ASD'].value_counts())

# ===============================
# 2. Prepare features & target
# ===============================
feature_cols = [
    'A1_Score','A2_Score','A3_Score','A4_Score','A5_Score',
    'A6_Score','A7_Score','A8_Score','A9_Score','A10_Score',
    'autism','jundice','gender_f','gender_m','age','used_app_before'
]
# Keep only features that exist in df
feature_cols = [c for c in feature_cols if c in df.columns]

X = np.asanyarray(df[feature_cols])
y = np.asanyarray(df[['Class/ASD']])

# ===============================
# 3. Train-test split
# ===============================
X_trainset, X_testset, y_trainset, y_testset = train_test_split(
    X, y, test_size=0.3, random_state=3
)

# ===============================
# 4. Train Decision Tree
# ===============================
ASDTree = DecisionTreeClassifier(criterion="entropy", max_depth=4)
ASDTree.fit(X_trainset, y_trainset)

# ===============================
# 5. Predictions & Accuracy
# ===============================
predTree = ASDTree.predict(X_testset)
print("Decision Tree's Accuracy:", metrics.accuracy_score(y_testset, predTree))

# ===============================
# 6. Plot Decision Tree
# ===============================
plt.figure(figsize=(12,8))
tree.plot_tree(ASDTree, feature_names=feature_cols, class_names=['No ASD','ASD'], filled=True)
plt.show()
-------------------------------
  output
  Class/ASD
0    515
1    189
Name: count, dtype: int64
Decision Tree's Accuracy: 0.8962264150943396
