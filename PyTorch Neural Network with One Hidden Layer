import torch
import torch.nn as nn
import torch.optim as optim

# 1. Training data (y = 2x + 1)
X = torch.tensor([[1.0], [2.0], [3.0], [4.0]])
y = torch.tensor([[3.0], [5.0], [7.0], [9.0]])

# 2. Define the neural network
class SimpleNN(nn.Module):
    def __init__(self):
        super(SimpleNN, self).__init__()
        self.hidden = nn.Linear(1, 5)  # 1 input → 5 hidden units
        self.output = nn.Linear(5, 1)  # 5 hidden → 1 output

    def forward(self, x):
        x = torch.relu(self.hidden(x))  # Activation
        x = self.output(x)
        return x

model = SimpleNN()

# 3. Loss and optimizer
criterion = nn.MSELoss()
optimizer = optim.SGD(model.parameters(), lr=0.01)

# 4. Training loop
for epoch in range(500):
    outputs = model(X)
    loss = criterion(outputs, y)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

# 5. Test prediction
test_input = torch.tensor([[5.0]])
predicted = model(test_input).item()
print(f"Prediction for x=5: {predicted:.2f}")


OUTPUT
Prediction for x=5: 11.02
